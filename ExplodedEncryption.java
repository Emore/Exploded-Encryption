/*
 * Converts a given string to ASCII codes, explodes each digits and creates 
 * a string in which only the ASCII digits coincide with the corresponding 
 * digits in pi.
 * 
 * @author Emanuel Ferm emanuel@eferm.com
 */ 
public class ExplodedEncryption {
	// source: WolframAlpha
	private static final String pi = 
			"314159265358979323846264338327950288419716939937510582097494"+
			"459230781640628620899862803482534211706798214808651328230664"+
			"709384460955058223172535940812848111745028410270193852110555"+
			"964462294895493038196442881097566593344612847564823378678316"+
			"527120190914564856692346034861045432664821339360726024914127"+
			"372458700660631558817488152092096282925409171536436789259036"+
			"001133053054882046652138414695194151160943305727036575959195"+
			"309218611738193261179310511854807446237996274956735188575272"+
			"489122793818301194912983367336244065664308602139494639522473"+
			"719070217986094370277053921717629317675238467481846766940513"+
			"200056812714526356082778577134275778960917363717872146844090"+
			"122495343014654958537105079227968925892354201995611212902196"+
			"086403441815981362977477130996051870721134999999837297804995"+
			"105973173281609631859502445945534690830264252230825334468503"+
			"526193118817101000313783875288658753320838142061717766914730"+
			"359825349042875546873115956286388235378759375195778185778053"+
			"217122680661300192787661119590921642019893809525720106548586"+
			"327886593615338182796823030195203530185296899577362259941389"+
			"124972177528347913151557485724245415069595082953311686172785"+
			"588907509838175463746493931925506040092770167113900984882401"+
			"285836160356370766010471018194295559619894676783744944825537"+
			"977472684710404753464620804668425906949129331367702898915210"+
			"475216205696602405803815019351125338243003558764024749647326"+
			"391419927260426992279678235478163600934172164121992458631503"+
			"028618297455570674983850549458858692699569092721079750930295"+
			"532116534498720275596023648066549911988183479775356636980742"+
			"654252786255181841757467289097777279380008164706001614524919"+
			"217321721477235014144197356854816136115735255213347574184946"+
			"843852332390739414333454776241686251898356948556209921922218"+
			"427255025425688767179049460165346680498862723279178608578438"+
			"382796797668145410095388378636095068006422512520511739298489"+
			"608412848862694560424196528502221066118630674427862203919494"+
			"504712371378696095636437191728746776465757396241389086583264"+
			"599581339047802759009946576407895126946839835259570982582262"+
			"052248940772671947826848260147699090264013639443745530506820"+
			"349625245174939965143142980919065925093722169646151570985838"+
			"741059788595977297549893016175392846813826868386894277415599"+
			"185592524595395943104997252468084598727364469584865383673622"+
			"262609912460805124388439045124413654976278079771569143599770"+
			"012961608944169486855584840635342207222582848864815845602850"+
			"601684273945226746767889525213852254995466672782398645659611"+
			"635488623057745649803559363456817432411251507606947945109659"+
			"609402522887971089314566913686722874894056010150330861792868"+
			"092087476091782493858900971490967598526136554978189312978482"+
			"168299894872265880485756401427047755513237964145152374623436"+
			"454285844479526586782105114135473573952311342716610213596953"+
			"623144295248493718711014576540359027993440374200731057853906"+
			"219838744780847848968332144571386875194350643021845319104848"+
			"100537061468067491927819119793995206141966342875444064374512"+
			"371819217999839101591956181467514269123974894090718649423196"+
			"156794520809514655022523160388193014209376213785595663893778"+
			"708303906979207734672218256259966150142150306803844773454920"+
			"260541466592520149744285073251866600213243408819071048633173"+
			"464965145390579626856100550810665879699816357473638405257145"+
			"910289706414011097120628043903975951567715770042033786993600"+
			"723055876317635942187312514712053292819182618612586732157919"+
			"841484882916447060957527069572209175671167229109816909152801"+
			"735067127485832228718352093539657251210835791513698820914442"+
			"100675103346711031412671113699086585163983150197016515116851"+
			"714376576183515565088490998985998238734552833163550764791853"+
			"589322618548963213293308985706420467525907091548141654985946"+
			"163718027098199430992448895757128289059232332609729";
			
	private static final int PI_LENGTH = 3711; // NO digits in var pi
	private static final int INTERVAL = 1; // increase for greater sparsity
	private static final int RATIO = 21; // typical output is 25x input
	
	public static String explode(String ascii) {
		// output string dimensioned for typical output size
		StringBuilder output = new StringBuilder(RATIO*ascii.length());
		
		for (int i = 0; i < ascii.length(); i++) {
			String num = ascii.substring(i,i+1); // number to be hidden
			
			// next occurence of num in pi at what index?
			int index = pi.indexOf(num, INTERVAL+output.length());
			
			// add some noise that doesn't match the corresponding digits in pi
			for (int j = output.length(); j < index; j++) {
				int k;
				do {
					k = (int) (10 * Math.random()); // random number, 0-9
				} while (k == Integer.parseInt(pi.substring(j,j+1)));
				output.append((int) k);
			}
			output.append(num);
		}
		return output.toString();
	}
	
	public static void main(String[] args) {
		// encrypt
		if (args[0].equals("-e")) {
			// the given string to encode
			String input = args[1].toUpperCase().replaceAll("[^A-Z 0-9]","");

			System.out.println("before: " + args[1]);
			System.out.println("after:  " + input);
			
			// output is exactly twice as long as input, due to ASCII encodings
			StringBuilder ascii = new StringBuilder(2*input.length());

			// convert input to ascii 
			for (int i = 0; i < input.length(); i++) {
				char c = input.charAt(i);
				int j = (int) c;
				ascii.append(j);
			}
			
			String exploded = explode(ascii.toString());
			double ratio = (double) exploded.length() / (double) input.length();
			
			System.out.println("input length:  " + input.length() + "\n" +
							   "output length: " + exploded.length() + "\n" +
							   "output/input ratio: " + ratio + "\n" +
							   "ASCII: " + ascii.toString() + "\n" +
							   "Pi'ed: " + exploded);
		}
		// decrypt
		else if (args[0].equals("-d")) {
			StringBuilder ascii = new StringBuilder(args[1].length()/RATIO);
			
			for (int i = 0; i < args[1].length(); i++)
				if (args[1].charAt(i) == pi.charAt(i))
					ascii.append(args[1].charAt(i));
			
			// plain is exactly half the chars than ascii
			StringBuilder plain = new StringBuilder(ascii.length()/2);
			
			for (int i = 0; i < ascii.length(); i+=2) {
				int c = Integer.parseInt(ascii.substring(i,i+2));
				plain.append(new Character((char) c)); // convert ascii code
			}
			
			System.out.println("ASCII: " + ascii.toString() + "\n" +
							   "Plain: " + plain.toString());
		} else {
			System.out.println("Wrong arguments.");
		}
	}
}